# https://gist.github.com/plentz/6737338
# config to disallow the browser to render the page inside a frame or iframe
# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
add_header X-Frame-Options SAMEORIGIN;

# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
# to disable content-type sniffing on some browsers.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
# currently supported in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
# https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)
# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
add_header X-Content-Type-Options nosniff;

# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
# this particular website if it was disabled by the user.
# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
add_header X-XSS-Protection "1; mode=block";

# with Content Security Policy (CSP) enabled (and a browser that supports it (http://caniuse.com/#feat=contentsecuritypolicy)),
# you can tell the browser that it can only download content from the domains you explicitly allow
# https://www.html5rocks.com/en/tutorials/security/content-security-policy/
# https://www.owasp.org/index.php/Content_Security_Policy
# https://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google.com/recaptcha/ https://www.gstatic.com/recaptcha/; style-src 'self' 'unsafe-inline'; frame-src 'self' https://www.google.com/recaptcha/ https://recaptcha.google.com/recaptcha/; object-src 'none'; img-src 'self' data: https://stamen-tiles-a.a.ssl.fastly.net https://stamen-tiles-b.a.ssl.fastly.net https://stamen-tiles-c.a.ssl.fastly.net https://stamen-tiles-d.a.ssl.fastly.net https://validator.swagger.io";
# HSTS
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# the upstream component nginx needs to connect to
upstream seed_upstream {
    server unix:///tmp/uwsgi-seed.sock;
}

# configuration of the server
server {

    listen      80 default_server;
    server_name localhost;
    charset     utf-8;

    # increase the timeouts (large files can take a while to upload)
    # These are probably not needed, but increasing anyway
    proxy_connect_timeout       600s;
    proxy_send_timeout          600s;
    proxy_read_timeout          600s;
    send_timeout                600s;

    # add error logs
    error_log logs/error.log warn;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    # configure maintenance page redirect
    if (-f /seed/collected_static/maintenance.html) {
        return 503;
    }
    error_page 503 @maintenance;
    location @maintenance {
            rewrite ^(.*)$ /maintenance.html break;
    }

    location /protected/ {
        internal;
        alias   /seed/media/;
    }

    location = /favicon.ico { access_log off; log_not_found off; }

    location /static {
        alias /seed/collected_static;
        autoindex off;
    }

    location / {
        uwsgi_pass         seed_upstream;
        uwsgi_read_timeout 600s;
        uwsgi_send_timeout 600s;

        # https://stackoverflow.com/a/40375474/2730450
        uwsgi_ignore_client_abort on;

        include     /etc/nginx/uwsgi_params;
    }
}
